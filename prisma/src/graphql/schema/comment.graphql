type Comment {
  id: ID!
  text: String!
  orphaned: Boolean
  archived: Boolean
  author: User
  post: Post
}

input CreateCommentInput {
  text: String!
  post: ID!
}

input UpdateCommentInput {
  text: String
  orphaned: Boolean
  archived: Boolean
}

input CommentWhereInput {
  text: StringFilter
  orphaned: Boolean
  archived: Boolean
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

type AggregateComment implements Aggregate {
  count: Int!
}

type CommentConnection implements Connection {
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
  aggregate: AggregateComment!
}

extend type Query {
  """
  For public API, this query will only return non-archived comments.
  For private API, it will return all comments.
  """
  comments(where: CommentWhereInput, first: Int, skip: Int, after: String): CommentConnection!
}

extend type Mutation {
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(id: ID!): Boolean!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type CommentEvent {
  type: EventType!
  data: Comment
}

extend type Subscription {
  comment(postId: ID!): CommentEvent!
}
