type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    active: Boolean!
    posts: [Post]!
    comments: [Comment]!
}

input UpdateUserInput {
    name: String
    email: String
    age: Int
    active: Boolean
}

input UserWhereInput {
    name: StringFilter
    email: StringFilter
    active: Boolean
}

type UserEdge {
    node: User!
    cursor: String!
}

type AggregateUser implements Aggregate {
    count: Int!
}

type UserConnection implements Connection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
    aggregate: AggregateUser!
}

extend type Query {
    """
    For public API, this query will only return active users.
    For private API, it will return all users.
    """
    users(
        where: UserWhereInput
        first: Int
        skip: Int
        after: String
    ): UserConnection!
    me: User!
}

extend type Mutation {
    deleteUser(id: ID!): Boolean!
    updateUser(id: ID!, data: UpdateUserInput!): User!
    activateUser(id: ID!): User!
}
